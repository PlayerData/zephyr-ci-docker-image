# CI Image (ci)

ARG BASE_IMAGE
FROM ${BASE_IMAGE:-zephyrprojectrtos/ci-base:latest}

ARG ZSDK_VERSION=0.16.5-1
ENV ZSDK_VERSION=$ZSDK_VERSION
ARG KITWARE_NINJA_VERSION=1.11.1.g95dee.kitware.jobserver-1
ENV KITWARE_NINJA_VERSION=$KITWARE_NINJA_VERSION
ARG CCACHE_VERSION=4.9.1
ENV CCACHE_VERSION=$CCACHE_VERSION
ARG DOXYGEN_VERSION=1.9.4
ENV DOXYGEN_VERSION=$DOXYGEN_VERSION
ARG RENODE_VERSION=1.14.0
ENV RENODE_VERSION=$RENODE_VERSION
ARG LLVM_VERSION=16
ENV LLVM_VERSION=$LLVM_VERSION
ARG BSIM_VERSION=v2.2
ENV BSIM_VERSION=$BSIM_VERSION
ARG SPARSE_VERSION=9212270048c3bd23f56c20a83d4f89b870b2b26e
ENV SPARSE_VERSION=$SPARSE_VERSION
ARG PROTOC_VERSION=21.7
ENV PROTOC_VERSION=$PROTOC_VERSION
ARG FVP_BASE_REVC_VERSION=11.24_11
ENV FVP_BASE_REVC_VERSION=$FVP_BASE_REVC_VERSION
ARG FVP_BASE_AEMV8R_VERSION=11.24_11
ENV FVP_BASE_AEMV8R_VERSION=$FVP_BASE_AEMV8R_VERSION
ARG FVP_CORSTONE300_VERSION=11.24_13
ENV FVP_CORSTONE300_VERSION=$FVP_CORSTONE300_VERSION
ARG FVP_CORSTONE310_VERSION=11.24_13
ENV FVP_CORSTONE310_VERSION=$FVP_CORSTONE310_VERSION
ARG WGET_ARGS="-q --show-progress --progress=bar:force:noscroll"

# Install Kitware ninja
# NOTE: Pre-built Kitware ninja binaries are only available for x86_64 host.
RUN if [ "${HOSTTYPE}" = "x86_64" ]; then \
	wget ${WGET_ARGS} https://github.com/Kitware/ninja/releases/download/v${KITWARE_NINJA_VERSION}/ninja-${KITWARE_NINJA_VERSION}_x86_64-linux-gnu.tar.gz && \
	tar xf ninja-${KITWARE_NINJA_VERSION}_x86_64-linux-gnu.tar.gz -C /opt && \
	ln -s /opt/ninja-${KITWARE_NINJA_VERSION}_x86_64-linux-gnu/ninja /usr/local/bin && \
	rm ninja-${KITWARE_NINJA_VERSION}_x86_64-linux-gnu.tar.gz \
	; fi

# Install ccache
# NOTE: Pre-built ccache binaries are only available for x86_64 host.
RUN if [ "${HOSTTYPE}" = "x86_64" ]; then \
	wget ${WGET_ARGS} https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz && \
	tar xf ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz -C /opt && \
	ln -s /opt/ccache-${CCACHE_VERSION}-linux-x86_64/ccache /usr/local/bin && \
	rm ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz \
	; fi

# removed doxygen (documentation generator)

# Removed renode (risc version of qemu?)

# Removed BSIM (babblesim pyhsical medium simulator for testing radio protocols)

# Install cargo environment
RUN wget -q -O-  "https://sh.rustup.rs" | sh -s -- -y

# Removed uefi-run utility (runs efi files in qemu)

# Install LLVM and Clang
RUN wget ${WGET_ARGS} https://apt.llvm.org/llvm.sh && \
	chmod +x llvm.sh && \
	./llvm.sh ${LLVM_VERSION} all && \
	rm -f llvm.sh

# removed sparse (package for static analysis)

# Removed protobuf

# Install Zephyr SDK
RUN mkdir -p /opt/toolchains && \
	cd /opt/toolchains && \
  echo https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZSDK_VERSION}/zephyr-sdk-${ZSDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz && \
	wget ${WGET_ARGS} https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZSDK_VERSION}/zephyr-sdk-${ZSDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz && \
	tar xf zephyr-sdk-${ZSDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz && \
  cat zephyr-sdk-${ZSDK_VERSION}/setup.sh && \
	zephyr-sdk-${ZSDK_VERSION}/setup.sh -t arm-zephyr-eabi -c && \
	rm zephyr-sdk-${ZSDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz

# removed FVP (virtual arm platforms)

# Clean up stale packages
RUN apt-get clean -y && \
	apt-get autoremove --purge -y && \
	rm -rf /var/lib/apt/lists/*

# Run the Zephyr SDK setup script as 'user' in order to ensure that the
# `Zephyr-sdk` CMake package is located in the package registry under the
# user's home directory.
USER user

RUN sudo -E -- bash -c ' \
	/opt/toolchains/zephyr-sdk-${ZSDK_VERSION}/setup.sh -c && \
	chown -R user:user /home/user/.cmake \
	'

USER root

# Set the locale
ENV ZEPHYR_TOOLCHAIN_VARIANT=zephyr
ENV PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig
ENV OVMF_FD_PATH=/usr/share/ovmf/OVMF.fd
ENV ARMFVP_BIN_PATH=/usr/local/bin
